@page "/search"
@inject Data.Services.ILocationService LocationService
@using ColoradoTrucking.Data.Responses
@using System.Threading
@using System.Threading.Tasks
@using System.Linq;
@using System.Data;
@using System.Text.RegularExpressions;

<!-- #region Original Search-->
<!--Input box and search button-->
    <form>
        <div class="col-10 offset-1">
            <div class="form-row form-group">
                <div class=" col-11">
                    <input class="search form-control" id="search" list="results" @bind="@SearchQuery" @bind:event="oninput" @onchange="GetSelected" autocomplete="off" />
                </div>
                <div class="col-1">
                    <button type="button" class="btn btn-primary" id="btnSearch" @onclick="RenderMap" width="40"><img class="@GetSearchClass()" src="@GetSearchIcon()"/></button>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col-12">
                    <div class="row">
                        <div class="col-sm-12 col-md-12 col-lg-4 col-xl-3">
                            <input type="radio" class="form-check-inline" name="filter" id="all" value="0" @onchange="FilterChange" checked="@(filterChoice == 0)" /><label for="all">Show all results</label>
                        </div>
                        <div class="col-sm-12 col-md-12 col-lg-4 col-xl-3">
                            <input type="radio" class="form-check-inline" name="filter" id="cham" value="1" @onchange="FilterChange" checked="@(filterChoice == 1)" /><label for="cham">Only chameleons</label>
                        </div>
                        <div class="col-sm-12 col-md-12 col-lg-5 col-xl-4">
                            <input type="radio" class="form-check-inline" name="filter" id="noCham" value="2" @onchange="FilterChange" checked="@(filterChoice == 2)" /><label for="noCham">Only non-chameleons</label>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </form>

<!--Datalist that holds autocomplete dropdown values-->
<datalist id="results">
        @if (@companyList.Count > 0) {
            <!--Add city values to list-->
            @foreach (var city in companyList.Select(e => e.properties.inCity).Distinct().Take(5)) {
                <option value="@city"></option>
            }
            <!--Add zip values to list-->
            @foreach (var zip in companyList.Select(e => e.properties.inZip).Distinct().Take(5)) {
                <option value="@zip"></option>
            }
            <!--Add individual company values to list-->
            @foreach (var company in companyList.Take(5)) {
                <option value="@company.properties.inName ~ @company.properties.GetAddress()"></option>
            }
        }
    }
</datalist>

<!-- #region API Call Method -->
@code {
    string searchQuery;
    bool isSearching;
    CancellationTokenSource currentSearchCts;
    List<Feature> companyList = new List<Feature>();
    List<string> autoList;
    bool noResults;
    int filterChoice = 0;
    string location;

    //Value of the search box
    string SearchQuery {
        get => searchQuery;
        set {
            searchQuery = value;
            //When something is typed, kick off the AutoFill method
            if (!string.IsNullOrEmpty(searchQuery)) {
                _ = AutoFill(searchQuery);
            }
        }
    }

    bool IsSearching => isSearching || currentSearchCts != null;

    //Event callback to pass the json to parent component
    [Parameter]
    public EventCallback<GeoJson> LocationChanged { get; set; }
    [Parameter]
    public EventCallback<bool> Searching { get; set; }

    //Generates data from database
    async Task AutoFill(string query) {
        try {
            isSearching = true;
            noResults = false;
            currentSearchCts?.Cancel();
            currentSearchCts = new CancellationTokenSource();
            var cancellationToken = currentSearchCts.Token;

            // Wait 500ms before sending request
            await Task.Delay(200);
            if (!cancellationToken.IsCancellationRequested) {

                //Make request to API
                var results = await LocationService.GetCompaniesAsync(query, cancellationToken);
                if (!cancellationToken.IsCancellationRequested) {
                    companyList = results.body.features;
                }
            }
            //Notify component to redraw
            isSearching = false;
            StateHasChanged();
            
        }
        catch (Exception ex) {
            Console.Error.WriteLine(ex.Message + " " + ex.StackTrace);
        }
    }

    //Event handler when user picks something from the autocomplete box
    //Filters geoJson to return only relevant values to parent component
    void GetSelected(ChangeEventArgs e) {
        location = (string)e.Value;
        RenderMap();
    }

    void RenderMap() {
        try {
            GeoJson geoJson;

            Regex zipPattern = new Regex(@"^[0-9]{5}(-[0-9]{4})?$");
            Regex cityPattern = new Regex(@"^\s*([a-zA-Z]+\s*){1,3}$");

            Func<Feature, bool> filter =
            (filterChoice) switch
            {
                0 => (feature => feature.properties.flag >= 0),
                1 => (feature => feature.properties.flag > 0),
                2 => (feature => feature.properties.flag == 0),
                _ => (feature => feature.properties.flag >= 0)
            };

            //If zip selected, return all values with that zip code
            if (zipPattern.IsMatch(location)) {
                geoJson = new GeoJson(companyList.Where(feature => feature.properties.inZip.StartsWith(location)).Where(filter).ToList<Feature>());
            }
            //If city selected, return all values in that city
            else if (cityPattern.IsMatch(location)) {
                geoJson = new GeoJson(companyList.Where(feature => feature.properties.inCity.Equals(location)).Where(filter).ToList<Feature>());
            }
            //Else default to address
            else {
                Console.WriteLine(location);
                int pos = location.IndexOf('~');
                location = location.Substring(0, pos - 1);
                Console.WriteLine(location);
                geoJson = new GeoJson(companyList.Where(feature => feature.properties.inName.Contains(location)).ToList<Feature>());
                Console.WriteLine(geoJson);
            }

            //If the results aren't null...
            if (geoJson != null) {
                //clear the searchbox
                //searchQuery = null;
                noResults = false;
                //Reinitialize the list
                //companyList = new List<Feature>();
                //Pass results to parent
                LocationChanged.InvokeAsync(geoJson);
            }
        }
        catch (ArgumentNullException) { }
    }

    void FilterChange(ChangeEventArgs e) {
        filterChoice = Convert.ToInt32(e.Value);
    }

    string GetSearchClass() {
        return isSearching ? "" : "fas fa-search";
    }
    string GetSearchIcon() {
        return isSearching ? "../img/searching.gif" : "";
    }
}

<!-- #endregion API Call Method-->
<!-- #endregion Original Search-->
<!-- #region Scaffold Method -->
@*@code{
    string searchQuery;
    bool noResults;
    List<InService> companyList = new List<InService>();

    string SearchQuery {
        get => searchQuery;
        set {
            searchQuery = value;
            if (!string.IsNullOrEmpty(searchQuery)) {
                Autofill(searchQuery);
            }
        }
    }

    void Autofill(string query) {
        noResults = false;
        using (var context = new EnterpriseContext()) {
            var _companyList = from c in context.InService
                               where c.LegalName.StartsWith(query)
                               || c.PhyStreet.StartsWith(query)
                               || c.PhyCity.StartsWith(query)
                               || c.PhyZip.StartsWith(query)
                               select c;

            FeatureCollection fc = _companyList as FeatureCollection;

            noResults = _companyList.Count() == 0;
            companyList = _companyList.ToList();

        }
        StateHasChanged();
    }*@
<!-- #endregion -->